<#@ Template Debug="False" Hostspecific="True" Language="C#" #>
<#@ Output Extension=".txt" #>
<#@ Assembly Name="$(ProjectDir)..\HomagGroup.ResourceHelper.1.1.6.0\build\net40\HomagGroup.ResourceHelperGenerator.dll" #>
<#@ Assembly Name="$(ProjectDir)..\HomagGroup.ResourceHelper.1.1.6.0\lib\net40\HomagGroup.ResourceHelper.dll" #>
<#@ Assembly Name="EnvDTE"                                                #>
<#@ Assembly Name="EnvDTE100"                                             #>
<#@ Assembly Name="EnvDTE80"                                              #>
<#@ Assembly Name="EnvDTE90"                                              #>
<#@ Assembly Name="EnvDTE90a"                                             #>
<#@ Assembly Name="Microsoft.VisualStudio.TextTemplating.12.0"            #>
<#@ Assembly Name="Microsoft.VisualStudio.TextTemplating.Interfaces.10.0" #>
<#@ Assembly Name="Microsoft.VisualStudio.TextTemplating.Interfaces.11.0" #>


<#@ Import Namespace="HomagGroup.ResourceHelperGenerator" #>
<#@ Import Namespace="System.CodeDom.Compiler" #>
<#@ Import Namespace="System.Reflection" #>
<#
var options = new GeneratorOptions
{
	// Indicates if resource keys constants should be generated - default is true
	GenerateResourceKeys = true,
	
	// Sets the accesibility level of generated resource keys class
	// It can be: Public, Internal or Default
	// Default means the same accessibility level of the resx
	ResourceKeysAccessibilityLevel = AccessibilityLevel.Default,

	// Sets the resource keys namespace - null defaults to resource methods namespace (i.e. MyProject.Properties.Strings)
	// It's possible to reference resources methods namespace by using the GeneratorOptions.TargetResourcesNamespaceTemplate constant
	// (i.e. GeneratorOptions.TargetResourcesNamespaceTemplate + ".Keys" will be translated to "MyProject.Properties.Strings.Keys")
	TargetResourceKeysNamespace = GeneratorOptions.DefaultResourcesNamespaceTemplate,

	// Sets the resource keys class name - null defaults to resource methods class name + "Keys" (i.e. ResourcesKeys)
	// It's possible to reference resources methods class name by using the GeneratorOptions.TargetResourcesClassNameTemplate constant
	// (i.e. GeneratorOptions.TargetResourcesClassNameTemplate + "_Keys" will be translated to "Resources_Keys")
	TargetResourceKeysClassName = null,

	// Sets the max area depth
	MaxAreaDepth = 0,

	// Sets the resource keys member type
	TargetResourceKeysMemberType = TargetResourceKeysMemberType.ResourceIdentifier
};
#>
<# /*= SmartStringResourcesGenerator.Generate(Host, Host.TemplateFile, options) */ #>
<#
var fss = (IFileSystemService)new FileSystemService();
var sp = (IServiceProvider) Host;
var dte = (EnvDTE80.DTE2) sp.GetService(typeof(EnvDTE.DTE));
var projItem = dte.Solution.FindProjectItem(Host.TemplateFile);
var proj = projItem.ContainingProject;
var provider = CodeDomProvider.CreateProvider("CSharp");
var cg = typeof(HomagGroup.ResourceHelperGenerator.CodeGenerator);
var gen = new HomagGroup.ResourceHelperGenerator.CodeGenerator(provider, fss);

var getNamespaceMeth = cg.GetMethod("GetNamespace", BindingFlags.NonPublic | BindingFlags.Instance);
var getNamespaceResult = getNamespaceMeth.Invoke(gen, new [] {(object)proj, (object)@"C:\Users\Matthias.Dittrich\Source\Repos\RunT4Templates\TestTemplatesCSharp\Properties\Resources.resx
"  } );
if (getNamespaceResult == null) { getNamespaceResult = "NOTHING"; }

var getDefaultNamespaceMeth = cg.GetMethod("GetDefaultNamespace", BindingFlags.NonPublic | BindingFlags.Instance);
var getDefaultNamespaceResult = getDefaultNamespaceMeth.Invoke(gen, null);
if (getDefaultNamespaceResult == null) { getDefaultNamespaceResult = "NOTHING"; }

#>
<#= getDefaultNamespaceResult #>